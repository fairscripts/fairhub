--========================================================--
-- Configurações iniciais
--========================================================--
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()

-- Listas
local lists = {
    Secrets = {
        "La Vacca Saturno Saturnita","Karkerkar Kurkur","Chimpanzini Spiderini",
        "Agarrini la Palini","Los Tralaleritos","Las Tralaleritas","Las Vaquitas Saturnitas",
        "Graipuss Medussi","Chicleteira Bicicleteira","La Grande Combinasion","Los Combinasionas",
        "Nuclearo Dinossauro","Los Hotspotsitos","Garama and Madundung","Dragon Cannelloni",
        "Secret Lucky Block","Pot Hotspot","Esok Sekolah"
    },
    BrainrotGods = {
        "Cocofanto Elefanto","Girafa Celestre","Gattatino Neonino","Matteo","Tralalero Tralala",
        "Los Crocodillitos","Espresso Signora","Odin Din Din Dun","Statutino Libertino",
        "Tukanno Bananno","Trenostruzzo Turbo 3000","Trippi Troppi Troppa Trippa","Ballerino Lololo",
        "Los Tungtungtungcitos","Piccione Macchina","Brainrot God Lucky Block","Orcalero Orcala"
    },
    Test = { "Tung Tung Tung Sahur" }
}
local activeLists = { Secrets = false, BrainrotGods = false, Test = false }

--========================================================--
-- Funções auxiliares
--========================================================--
local function waitForCharacterParts(timeout)
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local ok = pcall(function() char:WaitForChild("Humanoid", timeout) end)
    local ok2 = pcall(function() char:WaitForChild("HumanoidRootPart", timeout) end)
    return char, (ok and char:FindFirstChildOfClass("Humanoid")), (ok2 and char:FindFirstChild("HumanoidRootPart"))
end

-- Detecta função nativa
local firePromptFn
if typeof(fireproximityprompt) == "function" then
    firePromptFn = fireproximityprompt
elseif typeof(fireProximityPrompt) == "function" then
    firePromptFn = fireProximityPrompt
end

local function safeFirePrompt(prompt, holdTime)
    holdTime = holdTime or 2
    if not prompt or not prompt:IsA("ProximityPrompt") then return false end
    if firePromptFn then
        local ok, err = pcall(function() firePromptFn(prompt, holdTime) end)
        if ok then return true end
        warn("[safeFirePrompt] Nativo falhou:", err)
    end
    -- fallback
    local ok, vim = pcall(function() return game:GetService("VirtualInputManager") end)
    if ok and vim then
        pcall(function() vim:SendKeyEvent(true, Enum.KeyCode.E, false, game) end)
        task.wait(holdTime)
        pcall(function() vim:SendKeyEvent(false, Enum.KeyCode.E, false, game) end)
        return true
    end
    return false
end

local function acharPrompt(model)
    for _,desc in ipairs(model:GetDescendants()) do
        if desc:IsA("ProximityPrompt") then return desc end
    end
end

local function acharParteAlvo(model)
    local try = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChild("RootPart") or model.PrimaryPart
    if try and try:IsA("BasePart") then return try end
    for _,v in ipairs(model:GetDescendants()) do
        if v:IsA("BasePart") then return v end
    end
end

--========================================================--
-- Lógica de seguir e interagir
--========================================================--
local function seguirEInteragirAteSumir(model, displayName)
    local char, humanoid, hrp = waitForCharacterParts(5)
    if not char or not humanoid or not hrp then return end

    print(("[DEBUG] Iniciando follow no modelo: %s | DisplayName: %s"):format(model.Name, displayName))

    local lastPrint, lastFireTime, tentativas = 0, 0, 0
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not model or not model.Parent then
            print("[DEBUG] Modelo removido — parando follow.")
            connection:Disconnect()
            return
        end

        local targetPart = acharParteAlvo(model)
        if targetPart then
            local dist = (hrp.Position - targetPart.Position).Magnitude
            if tick() - lastPrint > 2 then
                print(("[DEBUG] Distância do modelo: %.2f studs"):format(dist))
                lastPrint = tick()
            end
            if dist > 2.2 then pcall(function() humanoid:MoveTo(targetPart.Position) end) end
        end

        local prompt = acharPrompt(model)
        if prompt then
            local promptPos
            if prompt.Parent:IsA("BasePart") then
                promptPos = prompt.Parent.Position
            elseif prompt.Parent:IsA("Attachment") and prompt.Parent.Parent:IsA("BasePart") then
                promptPos = prompt.Parent.Parent.Position
            end
            if promptPos and (hrp.Position - promptPos).Magnitude <= 10 then
                if tentativas < 5 and tick() - lastFireTime >= 2 then
                    print(("[DEBUG] Disparando ProximityPrompt (%d/5)"):format(tentativas+1))
                    safeFirePrompt(prompt, 2)
                    tentativas += 1
                    lastFireTime = tick()
                elseif tentativas >= 5 then
                    print("[DEBUG] Limite de tentativas atingido — parando follow.")
                    connection:Disconnect()
                end
            end
        else
            print("[DEBUG] ProximityPrompt sumiu — parando follow.")
            connection:Disconnect()
        end
    end)
end

--========================================================--
-- UI Melhorada
--========================================================--
local gui = Instance.new("ScreenGui")
gui.Name = "FollowUI"
gui.Parent = game:GetService("CoreGui")

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0.25, 0, 0.4, 0) -- 25% horizontal / 40% vertical
mainFrame.Position = UDim2.new(0.375, 0, 0.3, 0) -- centralizado
mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = gui
mainFrame.ClipsDescendants = true
mainFrame.BackgroundTransparency = 0.1
mainFrame.ZIndex = 2
mainFrame.Active = true
mainFrame.Draggable = true

local mainCorner = Instance.new("UICorner")
mainCorner.CornerRadius = UDim.new(0, 8)
mainCorner.Parent = mainFrame

-- Abas
local tabs = { "Auto Farm", "Misc" }
local tabButtons = {}

local tabFrame = Instance.new("Frame", mainFrame)
tabFrame.Size = UDim2.new(0.3, 0, 1, 0)
tabFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)

local tabCorner = Instance.new("UICorner")
tabCorner.CornerRadius = UDim.new(0, 8)
tabCorner.Parent = tabFrame

local contentFrame = Instance.new("Frame", mainFrame)
contentFrame.Size = UDim2.new(0.7, 0, 1, 0)
contentFrame.Position = UDim2.new(0.3, 0, 0, 0)
contentFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)

local contentCorner = Instance.new("UICorner")
contentCorner.CornerRadius = UDim.new(0, 8)
contentCorner.Parent = contentFrame

-- Função para mudar aba
local function switchTab(tabName)
    mainFrame:SetAttribute("SelectedTab", tabName)
    for name, btn in pairs(tabButtons) do
        btn.BackgroundColor3 = (name == tabName) and Color3.fromRGB(70, 130, 180) or Color3.fromRGB(45, 45, 45)
    end
    for _, child in pairs(contentFrame:GetChildren()) do
        if child:IsA("Frame") then child.Visible = (child.Name == tabName) end
    end
end

-- Criar botões das abas
for i, tabName in ipairs(tabs) do
    local btn = Instance.new("TextButton", tabFrame)
    btn.Size = UDim2.new(1, 0, 0, 40)
    btn.Position = UDim2.new(0, 0, 0, (i-1)*40)
    btn.Text = tabName
    btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    btn.TextColor3 = Color3.new(1, 1, 1)
    Instance.new("UICorner", btn)
    btn.MouseButton1Click:Connect(function() switchTab(tabName) end)
    tabButtons[tabName] = btn
end

-- Conteúdo Auto Farm
local autoFarmFrame = Instance.new("Frame", contentFrame)
autoFarmFrame.Size = UDim2.new(1, 0, 1, 0)
autoFarmFrame.BackgroundTransparency = 1
autoFarmFrame.Name = "Auto Farm"

local function createCheckbox(text, listKey, order)
    local holder = Instance.new("Frame", autoFarmFrame)
    holder.Size = UDim2.new(1, -10, 0, 40)
    holder.Position = UDim2.new(0, 5, 0, (order-1)*45)
    holder.BackgroundTransparency = 1

    local box = Instance.new("TextButton", holder)
    box.Size = UDim2.new(0, 30, 0, 30)
    box.Position = UDim2.new(0, 0, 0.5, -15)
    box.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    Instance.new("UICorner", box)
    box.Text = ""
    box.MouseButton1Click:Connect(function()
        activeLists[listKey] = not activeLists[listKey]
        box.BackgroundColor3 = activeLists[listKey] and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(60, 60, 60)
    end)

    local label = Instance.new("TextLabel", holder)
    label.Size = UDim2.new(1, -40, 1, 0)
    label.Position = UDim2.new(0, 40, 0, 0)
    label.Text = text
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
end

createCheckbox("AutoFarm Secrets", "Secrets", 1)
createCheckbox("AutoFarm BrainrotGods", "BrainrotGods", 2)
createCheckbox("AutoFarm Test", "Test", 3)

-- Aba Misc
local miscFrame = Instance.new("Frame", contentFrame)
miscFrame.Size = UDim2.new(1, 0, 1, 0)
miscFrame.BackgroundTransparency = 1
miscFrame.Name = "Misc"

switchTab("Auto Farm")

--========================================================--
-- Monitor de MovingAnimals
--========================================================--
local movingAnimals = Workspace:WaitForChild("MovingAnimals")
movingAnimals.ChildAdded:Connect(function(model)
    if not model:IsA("Model") then return end
    task.wait(0.5)

    local infoFolder = model:FindFirstChild("HumanoidRootPart") and model.HumanoidRootPart:FindFirstChild("Info")
    if not infoFolder then return end

    local displayLabel = infoFolder:FindFirstChild("DisplayName", true)
    if not (displayLabel and displayLabel:IsA("TextLabel")) then return end
    local txt = displayLabel.Text or ""
    print(("[DEBUG] Modelo detectado: %s | DisplayName: %s"):format(model.Name, txt))

    for listName, names in pairs(lists) do
        if activeLists[listName] then
            for _, name in ipairs(names) do
                if txt == name then
                    task.spawn(function()
                        seguirEInteragirAteSumir(model, txt)
                    end)
                    return
                end
            end
        end
    end
end)

print("[Script] Pronto — use a UI para ativar listas e seguir modelos.")
