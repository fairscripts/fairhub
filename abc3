-- Seguir modelo até ele sumir + interagir quando DisplayName estiver na lista selecionada via GUI
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()

-- ===================== LISTAS =====================
local lists = {
    Secrets = {
"La Vacca Saturno Saturnita",
"Karkerkar Kurkur",
"Chimpanzini Spiderini",
"Agarrini la Palini",
"Los Tralaleritos",
"Las Tralaleritas",
"Las Vaquitas Saturnitas",
"Graipuss Medussi",
"Chicleteira Bicicleteira",
"La Grande Combinasion",
"Los Combinasionas",
"Nuclearo Dinossauro",
"Los Hotspotsitos",
"Garama and Madundung",
"Dragon Cannelloni",
"Secret Lucky Block",
"Pot Hotspot",
"Esok Sekolah"
    },
    BrainrotGods = {
        "Cocofanto Elefanto",
        "Girafa Celestre",
        "Gattatino Neonino",
        "Matteo",
        "Tralalero Tralala",
        "Los Crocodillitos",
        "Espresso Signora",
        "Odin Din Din Dun",
        "Statutino Libertino",
        "Tukanno Bananno",
        "Trenostruzzo Turbo 3000",
        "Trippi Troppi Troppa Trippa",
        "Ballerino Lololo",
        "Los Tungtungtungcitos",
        "Piccione Macchina",
        "Brainrot God Lucky Block",
        "Orcalero Orcala"
    },
    Test = {
        "Tung Tung Tung Sahur"
    }
}

-- status de cada botão
local activeLists = { Secrets = false, BrainrotGods = false, Test = false }

-- ===================== GUI =====================
local function createToggleButton(name, posY)
    local ScreenGui = game:GetService("CoreGui"):FindFirstChild("FollowUI") or Instance.new("ScreenGui")
    ScreenGui.Name = "FollowUI"
    ScreenGui.Parent = game:GetService("CoreGui")

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 200, 0, 40)
    button.Position = UDim2.new(0, 20, 0, posY)
    button.Text = name .. " [OFF]"
    button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Parent = ScreenGui

    button.MouseButton1Click:Connect(function()
        activeLists[name] = not activeLists[name]
        button.Text = name .. (activeLists[name] and " [ON]" or " [OFF]")
        button.BackgroundColor3 = activeLists[name] and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(60, 60, 60)
    end)
end

createToggleButton("Secrets", 100)
createToggleButton("BrainrotGods", 150)
createToggleButton("Test", 200)

-- ===================== FUNÇÕES AUXILIARES =====================
local function waitForCharacterParts(timeout)
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local ok = pcall(function() char:WaitForChild("Humanoid", timeout) end)
    local ok2 = pcall(function() char:WaitForChild("HumanoidRootPart", timeout) end)
    return char, (ok and char:FindFirstChildOfClass("Humanoid")), (ok2 and char:FindFirstChild("HumanoidRootPart"))
end

local firePromptFn
if typeof(fireproximityprompt) == "function" then
    firePromptFn = fireproximityprompt
elseif typeof(fireProximityPrompt) == "function" then
    firePromptFn = fireProximityPrompt
else
    firePromptFn = nil
end

local function safeFirePrompt(prompt, holdTime)
    holdTime = holdTime or 2
    if not prompt or not prompt:IsA("ProximityPrompt") then return false end
    if firePromptFn then
        local ok, err = pcall(function() firePromptFn(prompt, holdTime) end)
        if ok then return true end
        warn("[safeFirePrompt] firePrompt pcall failed:", err)
    end
    local ok, vim = pcall(function() return game:GetService("VirtualInputManager") end)
    if ok and vim then
        pcall(function() vim:SendKeyEvent(true, Enum.KeyCode.E, false, game) end)
        task.wait(holdTime)
        pcall(function() vim:SendKeyEvent(false, Enum.KeyCode.E, false, game) end)
        return true
    end
    return false
end

local function acharPrompt(model)
    for _,desc in ipairs(model:GetDescendants()) do
        if desc:IsA("ProximityPrompt") then
            return desc
        end
    end
    return nil
end

local function acharParteAlvo(model)
    if not model then return nil end
    local try = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChild("RootPart") or model.PrimaryPart
    if try and try:IsA("BasePart") then return try end
    for _,v in ipairs(model:GetDescendants()) do
        if v:IsA("BasePart") then return v end
    end
    return nil
end

-- ===================== LÓGICA DE FOLLOW =====================
local function seguirEInteragirAteSumir(model)
    if not model or not model.Parent then return end

    local char, humanoid, hrp = waitForCharacterParts(5)
    if not char or not humanoid or not hrp then
        warn("[seguirEInteragir] Character/Humanoid/HRP não prontos. Abortando.")
        return
    end

    local modelName = model.Name
    print(("[seguirEInteragir] Iniciando follow em modelo %s"):format(modelName))

    local lastPrint, lastFireTime, tentativas = 0, 0, 0
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not model or not model.Parent then
            connection:Disconnect()
            print(("[seguirEInteragir] Modelo %s removido — parando follow."):format(modelName))
            return
        end

        local targetPart = acharParteAlvo(model)
        if targetPart then
            local dist = (hrp.Position - targetPart.Position).Magnitude
            if dist > 2.2 then
                pcall(function() humanoid:MoveTo(targetPart.Position) end)
            end
        end

        local prompt = acharPrompt(model)
        if prompt then
            local promptPos
            if prompt.Parent:IsA("BasePart") then
                promptPos = prompt.Parent.Position
            elseif prompt.Parent:IsA("Attachment") and prompt.Parent.Parent:IsA("BasePart") then
                promptPos = (prompt.Parent.Parent.CFrame * CFrame.new(prompt.Parent.Position)).p
            end

            if promptPos and hrp and (hrp.Position - promptPos).Magnitude <= 10 then
                if tentativas < 5 and tick() - lastFireTime >= 2 then
                    print(("[seguirEInteragir] Tentando interagir (%d/5)"):format(tentativas+1))
                    safeFirePrompt(prompt, 2)
                    tentativas = tentativas + 1
                    lastFireTime = tick()
                end
            end
        end
    end)
end

-- ===================== MONITOR DE MOVINGANIMALS =====================
local movingAnimals = Workspace:WaitForChild("MovingAnimals")
movingAnimals.ChildAdded:Connect(function(model)
    if not model:IsA("Model") then return end
    task.wait(0.5) -- dar tempo de carregar Info

    local infoFolder = model:FindFirstChild("HumanoidRootPart") and model.HumanoidRootPart:FindFirstChild("Info")
    if not infoFolder then return end

    local displayLabel = infoFolder:FindFirstChild("DisplayName", true)
    if not (displayLabel and displayLabel:IsA("TextLabel")) then return end

    local txt = displayLabel.Text or ""
    print(("[Monitor] Modelo %s chegou — DisplayName = %q"):format(model.Name, txt))

    for listName, names in pairs(lists) do
        if activeLists[listName] then
            for _, name in ipairs(names) do
                if txt == name then
                    task.spawn(function()
                        seguirEInteragirAteSumir(model)
                    end)
                    return
                end
            end
        end
    end
end)

print("[Script] Pronto — use os botões para ativar listas e seguir modelos.")
