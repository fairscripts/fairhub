local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local PPS = game:GetService("ProximityPromptService")
local CoreGui = game:GetService("CoreGui")

local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()

-- Detectar função de interação
local firePromptFn
if typeof(fireproximityprompt) == "function" then
    firePromptFn = fireproximityprompt
elseif typeof(fireProximityPrompt) == "function" then
    firePromptFn = fireProximityPrompt
else
    warn("[Script] Nenhuma função fireproximityprompt disponível")
end

-- Listas case-sensitive
local groups = {
    Secrets = {
        "La Vacca Saturno Saturnita","Chimpanzini Spiderini","Agarrini la Palini",
        "Los Tralaleritos","Las Tralaleritas","Las Vaquitas Saturnitas",
        "Graipuss Medussi","Chicleteira Bicicleteira","La Grande Combinasion",
        "Los Combinasionas","Nuclearo Dinossauro","Garama and Madundung",
        "Dragon Cannelloni","Secret Lucky Block","Pot Hotspot"
    },
    BrainrotGods = {
        "Cocofanto Elefanto","Girafa Celestre","Gattatino Neonino","Matteo",
        "Tralalero Tralala","Los Crocodillitos","Espresso Signora",
        "Odin Din Din Dun","Statutino Libertino","Tukanno Bananno",
        "Trenostruzzo Turbo 3000","Trippi Troppi Troppa Trippa","Ballerino Lololo",
        "Los Tungtungtungcitos","Piccione Macchina","Brainrot God Lucky Block",
        "Orcalero Orcala"
    },
    Test = { "Tung Tung Tung Sahur" }
}
local active = { Secrets = false, BrainrotGods = false, Test = false }

-- Pastas
local movingFolder = Workspace:WaitForChild("MovingAnimals")
local renderedFolder = Workspace:WaitForChild("RenderedMovingAnimals")

-- Mapas
local movingByDisplay = {}   -- [DisplayName] = { modelos }
local renderedByDisplay = {} -- [DisplayName] = { modelos }

-- Checa se DisplayName está nas listas ativas
local function isSelectedDisplay(DisplayName)
    for cat,list in pairs(groups) do
        if active[cat] then
            for _,name in ipairs(list) do
                if name == DisplayName then
                    return true
                end
            end
        end
    end
    return false
end

-- Lê exatamente HumanoidRootPart.Info.DisplayName
local function getDisplayName(model)
    local hrp = model:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    local info = hrp:FindFirstChild("Info")
    if not info then return nil end
    local lbl = info:FindFirstChild("DisplayName")
    if lbl and lbl:IsA("TextLabel") then
        return lbl.Text
    end
    return nil
end

-- Seguir modelo até ser destruído
local function followModel(model)
    if not model or not model.Parent then return end
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    print("[Follow] Seguindo modelo:", model.Name)
    local conn
    conn = RunService.Heartbeat:Connect(function()
        if not model or not model.Parent then
            conn:Disconnect()
            print("[Follow] Modelo destruído, parando.")
            return
        end
        local target = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
        if target then
            humanoid:MoveTo(target.Position)
        end
    end)
end

-- Interagir com prompt de modelo em MovingAnimals
local function interactWithPrompt(movingModel)
    local prompt = movingModel and movingModel:FindFirstChildWhichIsA("ProximityPrompt", true)
    if prompt and firePromptFn then
        print("[Interact] Disparando prompt em", movingModel.Name)
        firePromptFn(prompt, 2)
    else
        warn("[Interact] Nenhum prompt encontrado em", movingModel and movingModel.Name or "nil")
    end
end

-- Quando PromptShown em Rendered -> dispara prompt correspondente no Moving
PPS.PromptShown:Connect(function(prompt)
    local model = prompt:FindFirstAncestorWhichIsA("Model")
    local DisplayName = model and getDisplayName(model)
    if DisplayName and movingByDisplay[DisplayName] then
        for _,movingModel in ipairs(movingByDisplay[DisplayName]) do
            interactWithPrompt(movingModel)
        end
    end
end)

-- Registrar modelo em MovingAnimals
local function registerMoving(model)
    local DisplayName = getDisplayName(model)
    if not DisplayName then return end
    movingByDisplay[DisplayName] = movingByDisplay[DisplayName] or {}
    table.insert(movingByDisplay[DisplayName], model)
    print("[Moving] Registrado:", DisplayName)

    if isSelectedDisplay(DisplayName) and renderedByDisplay[DisplayName] then
        for _,rendModel in ipairs(renderedByDisplay[DisplayName]) do
            followModel(rendModel)
        end
    end
end

-- Registrar modelo em RenderedMovingAnimals
local function registerRendered(model)
    local DisplayName = getDisplayName(model)
    if not DisplayName then return end
    renderedByDisplay[DisplayName] = renderedByDisplay[DisplayName] or {}
    table.insert(renderedByDisplay[DisplayName], model)
    print("[Rendered] Registrado:", DisplayName)

    if isSelectedDisplay(DisplayName) and movingByDisplay[DisplayName] then
        followModel(model)
    end
end

-- Conexões
movingFolder.ChildAdded:Connect(registerMoving)
renderedFolder.ChildAdded:Connect(registerRendered)

-- GUI simples
do
    local screen = Instance.new("ScreenGui", CoreGui)
    screen.Name = "DisplaySelectUI"
    local frame = Instance.new("Frame", screen)
    frame.Size = UDim2.new(0,200,0,120)
    frame.Position = UDim2.new(0,10,0,60)
    frame.BackgroundColor3 = Color3.fromRGB(30,30,30)

    local function makeBtn(name, y)
        local btn = Instance.new("TextButton", frame)
        btn.Size = UDim2.new(1,-10,0,30)
        btn.Position = UDim2.new(0,5,0,y)
        btn.Text = name.." [OFF]"
        btn.BackgroundColor3 = Color3.fromRGB(150,30,30)
        btn.TextColor3 = Color3.new(1,1,1)
        btn.MouseButton1Click:Connect(function()
            active[name] = not active[name]
            if active[name] then
                btn.BackgroundColor3 = Color3.fromRGB(30,150,30)
                btn.Text = name.." [ON]"
            else
                btn.BackgroundColor3 = Color3.fromRGB(150,30,30)
                btn.Text = name.." [OFF]"
            end
        end)
    end

    makeBtn("Secrets", 10)
    makeBtn("BrainrotGods", 45)
    makeBtn("Test", 80)
end

print("[Script] Pronto para monitorar DisplayName case-sensitive.")
