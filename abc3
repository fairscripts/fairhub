-- Seguir modelo até ele sumir + interagir quando DisplayName == "Tung Tung Tung Sahur" (com cooldown de 2s)
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()

-- espera Character/Humanoid/HumanoidRootPart com timeout seguro
local function waitForCharacterParts(timeout)
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local ok = pcall(function() char:WaitForChild("Humanoid", timeout) end)
    local ok2 = pcall(function() char:WaitForChild("HumanoidRootPart", timeout) end)
    return char, (ok and char:FindFirstChildOfClass("Humanoid")), (ok2 and char:FindFirstChild("HumanoidRootPart"))
end

-- detectar função de fireproximityprompt de forma segura
local firePromptFn
if typeof(fireproximityprompt) == "function" then
    firePromptFn = fireproximityprompt
elseif typeof(fireProximityPrompt) == "function" then
    firePromptFn = fireProximityPrompt
else
    firePromptFn = nil
end

local function safeFirePrompt(prompt, holdTime)
    holdTime = holdTime or 2
    if not prompt or not prompt:IsA("ProximityPrompt") then return false end
    if firePromptFn then
        local ok, err = pcall(function() firePromptFn(prompt, holdTime) end)
        if ok then return true end
        warn("[safeFirePrompt] firePrompt pcall failed:", err)
    end
    local ok, vim = pcall(function() return game:GetService("VirtualInputManager") end)
    if ok and vim then
        pcall(function() vim:SendKeyEvent(true, Enum.KeyCode.E, false, game) end)
        task.wait(holdTime)
        pcall(function() vim:SendKeyEvent(false, Enum.KeyCode.E, false, game) end)
        return true
    end
    return false
end

-- achar um ProximityPrompt dentro do modelo
local function acharPrompt(model)
    for _,desc in ipairs(model:GetDescendants()) do
        if desc:IsA("ProximityPrompt") then
            return desc
        end
    end
    return nil
end

-- encontra a melhor BasePart para seguir
local function acharParteAlvo(model)
    if not model then return nil end
    local try = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChild("RootPart") or model.PrimaryPart
    if try and try:IsA("BasePart") then return try end
    for _,v in ipairs(model:GetDescendants()) do
        if v:IsA("BasePart") then return v end
    end
    return nil
end

-- função principal: seguir e interagir enquanto o modelo existir (com cooldown)
local function seguirEInteragirAteSumir(model)
    if not model or not model.Parent then return end

    local char, humanoid, hrp = waitForCharacterParts(5)
    if not char or not humanoid or not hrp then
        warn("[seguirEInteragir] Character/Humanoid/HRP não prontos. Abortando.")
        return
    end

    local modelName = model.Name
    print(("[seguirEInteragir] Iniciando follow em modelo %s"):format(modelName))

    local lastPrint = 0
    local lastFireTime = 0 -- cooldown individual para esse modelo
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not model or not model.Parent then
            connection:Disconnect()
            print(("[seguirEInteragir] Modelo %s removido — parando follow."):format(modelName))
            return
        end

        local targetPart = acharParteAlvo(model)
        if targetPart then
            local targetPos = targetPart.Position
            local dist = (hrp.Position - targetPos).Magnitude
            if dist > 2.2 then
                local ok, err = pcall(function() humanoid:MoveTo(targetPos) end)
                if not ok and tick() - lastPrint > 3 then
                    warn("[seguirEInteragir] humanoid:MoveTo falhou:", err)
                    lastPrint = tick()
                end
            end
            if tick() - lastPrint > 2 then
                print(("[seguirEInteragir] %s → dist = %.2f"):format(modelName, dist))
                lastPrint = tick()
            end
        end

        local prompt = acharPrompt(model)
        if prompt then
            local pparent = prompt.Parent
            local promptPos = nil
            if pparent and pparent:IsA("BasePart") then
                promptPos = pparent.Position
            elseif pparent and pparent:IsA("Attachment") and pparent.Parent and pparent.Parent:IsA("BasePart") then
                promptPos = (pparent.Parent.CFrame * CFrame.new(pparent.Position)).p
            end

            local canTry = true
            if promptPos and hrp then
                local d = (hrp.Position - promptPos).Magnitude
                if d > (prompt.MaxActivationDistance + 6) then
                    canTry = false
                end
            end

            if canTry and (tick() - lastFireTime >= 2) then -- cooldown de 2 segundos
                print(("[seguirEInteragir] Prompt encontrado em %s — tentando interagir"):format(modelName))
                local ok = safeFirePrompt(prompt, 2)
                if ok then
                    print(("[seguirEInteragir] Interação disparada para %s"):format(modelName))
                else
                    warn(("[seguirEInteragir] Falha ao interagir com prompt em %s"):format(modelName))
                end
                lastFireTime = tick()
            end
        end
    end)
end

-- monitor: quando modelo novo for adicionado em MovingAnimals, checar DisplayName
local movingAnimals = Workspace:WaitForChild("MovingAnimals")
movingAnimals.ChildAdded:Connect(function(model)
    if not model or not model:IsA("Model") then return end
    task.wait(0.15)

    local infoFolder = model:FindFirstChild("HumanoidRootPart") and model.HumanoidRootPart:FindFirstChild("Info")
    if not infoFolder then
        task.wait(0.3)
        infoFolder = model:FindFirstChild("HumanoidRootPart") and model.HumanoidRootPart:FindFirstChild("Info")
    end
    if not infoFolder then return end

    local displayLabel = infoFolder:FindFirstChild("DisplayName", true)
    if displayLabel and displayLabel:IsA("TextLabel") then
        local txt = displayLabel.Text or ""
        print(("[Monitor] Modelo %s chegou — DisplayName = %q"):format(model.Name, txt))
        if txt == "Tung Tung Tung Sahur" then
            task.spawn(function()
                seguirEInteragirAteSumir(model)
            end)
        end
    end
end)

print("[Script] Monitor inicial pronto (com cooldown de 2s para interação).")
